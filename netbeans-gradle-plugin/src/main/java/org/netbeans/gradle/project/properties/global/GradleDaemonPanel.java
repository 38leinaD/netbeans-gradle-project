package org.netbeans.gradle.project.properties.global;

import java.net.URL;
import java.util.concurrent.TimeUnit;
import javax.swing.SpinnerNumberModel;
import org.netbeans.gradle.project.util.NbFileUtils;

import static org.jtrim.property.BoolProperties.*;
import static org.jtrim.property.swing.AutoDisplayState.*;
import static org.jtrim.property.swing.SwingProperties.*;

@SuppressWarnings("serial")
public class GradleDaemonPanel extends javax.swing.JPanel implements GlobalSettingsEditor {
    private static final URL HELP_URL = NbFileUtils.getSafeURL("https://github.com/kelemen/netbeans-gradle-project/wiki/Global-Settings");

    private static final int DEFAULT_TIMEOUT_SEC = longToInt(TimeUnit.HOURS.toSeconds(3));
    private static final TimeUnit DISPLAY_UNIT = TimeUnit.MINUTES;

    public GradleDaemonPanel() {
        initComponents();

        jDaemonTimeoutSpinner.setModel(new SpinnerNumberModel(0, 1, Integer.MAX_VALUE, 30));

        setupEnableDisable();
    }

    private void setupEnableDisable() {
        addSwingStateListener(not(buttonSelected(jUseDefaultDaemonTimeoutCheck)),
                componentDisabler(jDaemonTimeoutSpinner));
    }

    @Override
    public void updateSettings(GlobalGradleSettings globalSettings) {
        Integer timeout = globalSettings.gradleDaemonTimeoutSec().getValue();
        jUseDefaultDaemonTimeoutCheck.setSelected(timeout == null);

        int displayTimeoutSec = timeout != null ? timeout : DEFAULT_TIMEOUT_SEC;

        jDaemonTimeoutSpinner.setValue(DISPLAY_UNIT.convert(displayTimeoutSec, TimeUnit.SECONDS));
    }

    @Override
    public void saveSettings(GlobalGradleSettings globalSettings) {
        globalSettings.gradleDaemonTimeoutSec().setValue(getDaemonTimeoutInSec(globalSettings));
    }

    private static int longToInt(long value) {
        if (value >= (long)Integer.MAX_VALUE) return Integer.MAX_VALUE;
        if (value <= (long)Integer.MIN_VALUE) return Integer.MIN_VALUE;
        return (int)value;
    }

    private Integer getDaemonTimeoutInSec(GlobalGradleSettings globalSettings) {
        if (jUseDefaultDaemonTimeoutCheck.isSelected()) {
            return null;
        }

        Object value = jDaemonTimeoutSpinner.getValue();

        int displayTimeout = -1;
        if (value instanceof Number) {
            displayTimeout = ((Number)value).intValue();
        }

        return displayTimeout >= 0
                ? longToInt(DISPLAY_UNIT.toSeconds(displayTimeout))
                : globalSettings.gradleDaemonTimeoutSec().getValue();
    }

    @Override
    public SettingsEditorProperties getProperties() {
        SettingsEditorProperties.Builder result = new SettingsEditorProperties.Builder(this);
        result.setHelpUrl(HELP_URL);

        return result.create();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDaemonTimeoutCaption = new javax.swing.JLabel();
        jDaemonTimeoutSpinner = new javax.swing.JSpinner();
        jUseDefaultDaemonTimeoutCheck = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jDaemonTimeoutCaption, org.openide.util.NbBundle.getMessage(GradleDaemonPanel.class, "GradleDaemonPanel.jDaemonTimeoutCaption.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jUseDefaultDaemonTimeoutCheck, org.openide.util.NbBundle.getMessage(GradleDaemonPanel.class, "GradleDaemonPanel.jUseDefaultDaemonTimeoutCheck.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDaemonTimeoutCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDaemonTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jUseDefaultDaemonTimeoutCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDaemonTimeoutCaption)
                    .addComponent(jDaemonTimeoutSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUseDefaultDaemonTimeoutCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jDaemonTimeoutCaption;
    private javax.swing.JSpinner jDaemonTimeoutSpinner;
    private javax.swing.JCheckBox jUseDefaultDaemonTimeoutCheck;
    // End of variables declaration//GEN-END:variables
}
