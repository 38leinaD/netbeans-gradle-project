package org.netbeans.gradle.project.properties.ui;

import java.net.URL;
import org.netbeans.gradle.project.api.config.ActiveSettingsQuery;
import org.netbeans.gradle.project.api.config.PropertyReference;
import org.netbeans.gradle.project.properties.global.CommonGlobalSettings;
import org.netbeans.gradle.project.properties.global.GlobalSettingsEditor;
import org.netbeans.gradle.project.properties.global.SelfMaintainedTasks;
import org.netbeans.gradle.project.properties.global.SettingsEditorProperties;
import org.netbeans.gradle.project.util.NbFileUtils;

@SuppressWarnings("serial")
public class TaskExecutionPanel extends javax.swing.JPanel implements GlobalSettingsEditor {
    private static final URL HELP_URL = NbFileUtils.getSafeURL("https://github.com/kelemen/netbeans-gradle-project/wiki/Task-Execution");

    private final EnumCombo<SelfMaintainedTasks> selfMaintainedTasksCombo;

    public TaskExecutionPanel() {
        initComponents();

        selfMaintainedTasksCombo = new EnumCombo<>(SelfMaintainedTasks.class, SelfMaintainedTasks.FALSE, jAutoTasks);
    }

    @Override
    public void updateSettings(ActiveSettingsQuery globalSettings) {
        PropertyReference<Boolean> alwaysClearOutput = CommonGlobalSettings.alwaysClearOutput(globalSettings);
        PropertyReference<SelfMaintainedTasks> selfMaintainedTasks = CommonGlobalSettings.selfMaintainedTasks(globalSettings);
        PropertyReference<Boolean> skipTests = CommonGlobalSettings.skipTests(globalSettings);
        PropertyReference<Boolean> skipCheck = CommonGlobalSettings.skipCheck(globalSettings);
        PropertyReference<Boolean> replaceLfOnStdIn = CommonGlobalSettings.replaceLfOnStdIn(globalSettings);

        jAlwayClearOutput.setSelected(alwaysClearOutput.getActiveValue());
        selfMaintainedTasksCombo.setSelectedValue(selfMaintainedTasks.getActiveValue());
        jSkipTestsCheck.setSelected(skipTests.getActiveValue());
        jSkipCheckCheckBox.setSelected(skipCheck.getActiveValue());
        jReplaceLfOnStdIn.setSelected(replaceLfOnStdIn.getActiveValue());
    }

    @Override
    public void saveSettings(ActiveSettingsQuery globalSettings) {
        PropertyReference<Boolean> alwaysClearOutput = CommonGlobalSettings.alwaysClearOutput(globalSettings);
        PropertyReference<SelfMaintainedTasks> selfMaintainedTasks = CommonGlobalSettings.selfMaintainedTasks(globalSettings);
        PropertyReference<Boolean> skipTests = CommonGlobalSettings.skipTests(globalSettings);
        PropertyReference<Boolean> skipCheck = CommonGlobalSettings.skipCheck(globalSettings);
        PropertyReference<Boolean> replaceLfOnStdIn = CommonGlobalSettings.replaceLfOnStdIn(globalSettings);

        skipTests.setValue(jSkipTestsCheck.isSelected());
        skipCheck.setValue(jSkipCheckCheckBox.isSelected());
        alwaysClearOutput.setValue(jAlwayClearOutput.isSelected());
        selfMaintainedTasks.setValue(selfMaintainedTasksCombo.getSelectedValue());
        replaceLfOnStdIn.setValue(jReplaceLfOnStdIn.isSelected());
    }

    @Override
    public SettingsEditorProperties getProperties() {
        SettingsEditorProperties.Builder result = new SettingsEditorProperties.Builder(this);
        result.setHelpUrl(HELP_URL);

        return result.create();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSkipTestsCheck = new javax.swing.JCheckBox();
        jSkipCheckCheckBox = new javax.swing.JCheckBox();
        jAlwayClearOutput = new javax.swing.JCheckBox();
        jReplaceLfOnStdIn = new javax.swing.JCheckBox();
        jAutoTasksCaption = new javax.swing.JLabel();
        jAutoTasks = new javax.swing.JComboBox<>();

        org.openide.awt.Mnemonics.setLocalizedText(jSkipTestsCheck, org.openide.util.NbBundle.getMessage(TaskExecutionPanel.class, "TaskExecutionPanel.jSkipTestsCheck.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jSkipCheckCheckBox, org.openide.util.NbBundle.getMessage(TaskExecutionPanel.class, "TaskExecutionPanel.jSkipCheckCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jAlwayClearOutput, org.openide.util.NbBundle.getMessage(TaskExecutionPanel.class, "TaskExecutionPanel.jAlwayClearOutput.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jReplaceLfOnStdIn, org.openide.util.NbBundle.getMessage(TaskExecutionPanel.class, "TaskExecutionPanel.jReplaceLfOnStdIn.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jAutoTasksCaption, org.openide.util.NbBundle.getMessage(TaskExecutionPanel.class, "TaskExecutionPanel.jAutoTasksCaption.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAutoTasksCaption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAutoTasks, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSkipTestsCheck)
                            .addComponent(jAlwayClearOutput)
                            .addComponent(jSkipCheckCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jReplaceLfOnStdIn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSkipTestsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSkipCheckCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAlwayClearOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jReplaceLfOnStdIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAutoTasksCaption)
                    .addComponent(jAutoTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAlwayClearOutput;
    private javax.swing.JComboBox<EnumCombo.Item<SelfMaintainedTasks>> jAutoTasks;
    private javax.swing.JLabel jAutoTasksCaption;
    private javax.swing.JCheckBox jReplaceLfOnStdIn;
    private javax.swing.JCheckBox jSkipCheckCheckBox;
    private javax.swing.JCheckBox jSkipTestsCheck;
    // End of variables declaration//GEN-END:variables
}
