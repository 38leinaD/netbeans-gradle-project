apply plugin: 'java'
apply plugin: 'nbm'

ext.scriptFile = { String fileName ->
    return new File(new File(rootDir, 'gradle'), fileName);
}

apply from: scriptFile('compiler-settings.gradle');
configureJavaCompilers(7);

String netbeansVersion = 'RELEASE72'

repositories {
    mavenCentral()
    maven { url 'http://bits.netbeans.org/maven2/' }
    maven { url 'http://repo.gradle.org/gradle/libs-releases-local' }
    maven { url 'http://dl.bintray.com/kelemen/maven' }
}

compileJava {
  options.compilerArgs = ['-sourcepath', "$project.projectDir/src/main/resources"]
}

def tryGetProperty = {String name, String defaultValue ->
    if (!project.hasProperty(name)) {
        return defaultValue;
    }

    return project.property(name)?.toString();
}

nbm {
    moduleName = 'org.netbeans.gradle.project';

    def keyStoreFile = tryGetProperty('nbGradlePluginKeyStore', null);
    if (keyStoreFile != null) {
        keystore = project.file(keyStoreFile);
        nbm_alias = tryGetProperty('nbGradlePluginKeyStoreUser', 'kelemen');
        storepass = tryGetProperty('nbGradlePluginKeyStorePass', '');
    }

    requires('cnb.org.netbeans.modules.groovy.kit');
    requires('cnb.org.netbeans.modules.java.j2seproject');
}

def netbeansModule = { String groupName, String moduleName ->
    return [
	    group: groupName,
		name: moduleName,
		version: netbeansVersion
	]
}

def netbeansApi = { String moduleName ->
    return netbeansModule('org.netbeans.api', moduleName)
}

dependencies {
    providedCompile netbeansApi('org-netbeans-api-annotations-common')
    providedCompile netbeansApi('org-netbeans-api-debugger')
    providedCompile netbeansApi('org-netbeans-api-debugger-jpda')
    providedCompile netbeansApi('org-netbeans-api-java')
    providedCompile netbeansApi('org-netbeans-api-java-classpath')
    providedCompile netbeansApi('org-netbeans-api-progress')
    providedCompile netbeansApi('org-netbeans-core-multiview')
    providedCompile netbeansApi('org-netbeans-modules-editor-indent-project')
    providedCompile netbeansApi('org-netbeans-modules-java-platform')
    providedCompile netbeansApi('org-netbeans-modules-java-project')
    providedCompile netbeansApi('org-netbeans-modules-java-source')
    providedCompile netbeansApi('org-netbeans-modules-options-api')
    providedCompile netbeansApi('org-netbeans-modules-projectapi')
    providedCompile netbeansApi('org-netbeans-modules-projectuiapi')
    providedCompile netbeansApi('org-netbeans-modules-queries')
    providedCompile netbeansApi('org-openide-actions')
    providedCompile netbeansApi('org-openide-awt')
    providedCompile netbeansApi('org-openide-dialogs')
    providedCompile netbeansApi('org-openide-filesystems')
    providedCompile netbeansApi('org-openide-io')
    providedCompile netbeansApi('org-openide-loaders')
    providedCompile netbeansApi('org-openide-modules')
    providedCompile netbeansApi('org-openide-nodes')
    providedCompile netbeansApi('org-openide-text')
    providedCompile netbeansApi('org-openide-util')
    providedCompile netbeansApi('org-openide-util-lookup')
    providedCompile netbeansApi('org-openide-windows')
    providedCompile netbeansApi('org-netbeans-libs-javacapi')
    providedCompile netbeansApi('org-netbeans-modules-nbjunit')
    providedCompile netbeansApi('org-netbeans-libs-junit4')
    providedCompile netbeansModule('org.netbeans.modules', 'org-netbeans-modules-gsf-testrunner')
    providedCompile netbeansModule('org.netbeans.modules', 'org-netbeans-insane')

    compile 'org.slf4j:slf4j-api:1.7.2'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile project(':netbeans-gradle-default-models')

    compile 'org.gradle:gradle-tooling-api:1.11'
    compile 'org.jtrim:jtrim-gui:1.7.2'
    compile 'org.jtrim:jtrim-async:1.7.2'
    compile 'org.jtrim:jtrim-core:1.7.2'
    testCompile 'junit:junit:4.10'
    testCompile 'com.google.guava:guava:14.0.1'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

// set netbeansInstallDir project property

task run(type: Exec) {
    dependsOn 'netbeans'
    doFirst {
        if (!project.hasProperty('netBeansInstallDir')) {
            throw new GradleException("missing netBeansInstallDir property")
        }
        def confFile = project.file("${project.buildDir}/testuserdir/etc/netbeans.conf")
        confFile.parentFile.mkdirs()
        confFile.write "netbeans_extraclusters=\"${project.buildDir}/module\""
    }

    workingDir "${project.buildDir}"

    //on windows:
    commandLine netBeansInstallDir + '\\bin\\netbeans.exe', '--userdir', "${project.buildDir}\\testuserdir"
}
