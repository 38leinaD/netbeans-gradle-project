import org.gradle.tooling.provider.model.*

private class DynamicGradleModelPlugin implements Plugin<Project> {
    private final ToolingModelBuilderRegistry registry

    @javax.inject.Inject
    public DynamicGradleModelPlugin(ToolingModelBuilderRegistry registry) {
        this.registry = registry
    }

    public void apply(Project project) {
        def input = project.inputForDynamicGradleModelPlugin
        registry.register(project.modelClassForDynamicGradleModelPlugin.newInstance(input))
    }
}

private class CustomClassObjectInputStream extends ObjectInputStream {
    private final ClassLoader classLoader;

    public CustomClassObjectInputStream(ClassLoader classLoader, InputStream input) throws IOException {
        super(input)

        this.classLoader = classLoader
    }

    @Override
    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
        return classLoader.loadClass(desc.getName())
    }
}

List<String> jarFiles = $MODEL_JAR_FILE_PATHS;
List<URL> jarURLList = new ArrayList(jarFiles.size());
jarFiles.each { String jarFile ->
    jarURLList.add(new File(jarFile).toURI().toURL())
}

URL[] urls = jarURLList.toArray(new URL[jarURLList.size()]);

URLClassLoader classLoader = new URLClassLoader(urls, getClass().classLoader)
Class modelClass = classLoader.loadClass('org.netbeans.gradle.model.internal.DynamicModelLoader')

Object inputForPlugin = null

String inputFileAsStr = $INPUT_FILE
if (inputFileAsStr != null) {
    File inputFile = new File(inputFileAsStr)
    ObjectInputStream serializedInput = new CustomClassObjectInputStream(classLoader, inputFile.newInputStream())
    try {
        inputForPlugin = serializedInput.readObject()
    } finally {
        serializedInput.close()
    }
}

allprojects {
    ext.modelClassForDynamicGradleModelPlugin = modelClass
    ext.inputForDynamicGradleModelPlugin = inputForPlugin
    apply plugin: DynamicGradleModelPlugin
}
